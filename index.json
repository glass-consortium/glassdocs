[
{
	"uri": "/",
	"title": "HOME",
	"tags": [],
	"description": "GLASS Workflows",
	"content": " Glioma Longitudinal AnalySiS Consortium   Issues loading website contents?   If website is not loading all of its contents or have formatting issues, you may visit mirror website at http://guide.glass-consortium.org\n  This website hosts how-to manuals for running various analysis pipelines for the GLASS consortium.\nPreprint   We are moving to Singularity based workflows for better compatibility with academic IT infrastructure. You can now download and try beta build of Singularity image at https://github.com/glass-consortium/glasstools\nBoth Docker and Singularity images are near identical with a few changes in ENTRYPOINT and CMD specifications. While docker and Singularity images are stable enough to execute workflows, documentation and run scripts (shell wrappers) to run all of workflows are not ready yet for production release. Run scripts reside outside of image and (when available via user mounted disk volumes) are sourced by image entrypoint/cmd specifications at the execution of workflow. We will soon update documentation to run workflows.\n Please report issues related to workflows at https://github.com/glass-consortium/glassdocs/issues and Docker or Singularity image at https://github.com/glass-consortium/glasstools/issues\n  Set Up   Setup keystone image Setup disk mounts Prepare disk mounts on the host system for use with docker containers  Setup keystone image    Download and setup docker image: glasstools/keystone\n\n Setup disk mounts    Prepare disk mounts on the host system for use with docker containers\n\n How To  Workflows DNA Alignment Allows whole genome and exome alignment from fastq or legacy bam files. Variant Caller Allows variant calling using\u0026hellip; MuTect v1 MuTect v2 1 VarScan2 1 RNAseq Analyses Allows processing of RNAseq data using\u0026hellip; STAR-htseq PRADA TidyData Backup level 1 realigned bam files Backup level 2 or 3 output files for downstream analyses\n Workflows  \n DNA Alignment   Allows whole genome and exome alignment from fastq or legacy bam files.\n \n Variant Caller   Allows variant calling using\u0026hellip;\n  MuTect v1 MuTect v2 1 VarScan2 1  \n RNAseq Analyses   Allows processing of RNAseq data using\u0026hellip;\n  STAR-htseq PRADA  \n TidyData   Backup level 1 realigned bam files Backup level 2 or 3 output files for downstream analyses  \n "
},
{
	"uri": "/setup/",
	"title": " Set Up",
	"tags": [],
	"description": "",
	"content": "  Setup keystone image  \n Setup disk mounts    Prepare disk mounts on the host system for use with docker containers\n\n  "
},
{
	"uri": "/setup/docker/",
	"title": "Setup keystone image",
	"tags": [],
	"description": "",
	"content": "  Download and setup docker image: glasstools/keystone\n\nSingularity image singularity pull shub://glass-consortium/glasstools:beta  Visit https://github.com/glass-consortium/glasstools for setup instructions on Singularity\nDocker image docker pull glasstools/keystone # OR docker pull glasstools/keystone:1.2.2    https://hub.docker.com/r/glasstools/keystone\nTest run With data mounts and host user:group mapping export GLASSMOUNTS=\u0026quot;/fastscratch/foo/dockvol/glass_tools/glass_mounts\u0026quot; docker run -e HOSTUSER=$USER -e HOSTGROUP=verhaak-lab -e HOSTUSERID=$UID -e HOSTGROUPID=56565 -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/glasscore:/mnt/glasscore -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/scratch:/mnt/scratch -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk2/glassdata:/mnt/glassdata glasstools/keystone   This will source commands or workflow from disk1/glasscore/Workflows/startup script  Run specific tools  To run specific command (user id mapped to host user), use \u0026quot;-c bash command\u0026quot; format immediately after docker run ... glasstools/keystone.\n export GLASSMOUNTS=\u0026quot;/fastscratch/foo/dockvol/glass_tools/glass_mounts\u0026quot; docker run -e HOSTUSER=$USER -e HOSTGROUP=verhaak-lab -e HOSTUSERID=$UID -e HOSTGROUPID=56565 -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/glasscore:/mnt/glasscore -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/scratch:/mnt/scratch -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk2/glassdata:/mnt/glassdata glasstools/keystone \u0026quot;-c samtools\u0026quot; ## view data mounts docker run -e HOSTUSER=$USER -e HOSTGROUP=verhaak-lab -e HOSTUSERID=$UID -e HOSTGROUPID=56565 -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/glasscore:/mnt/glasscore -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/scratch:/mnt/scratch -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk2/glassdata:/mnt/glassdata glasstools/keystone \u0026quot;-c ls -alh /mnt/\u0026quot;  Without data mounts docker run glasstools/keystone   keystone image is configured to be run with structured data mounts as shown under glass_mounts directory. Barebone docker run glasstools/keystone will quit immediately with partial message like following:\nUser and Group ID mapping: ENABLE Running userid_mapping.sh script\n disable usermapping  PS: Without host user:group mapping, docker container will run under default glassuser which has limited read:write permissions to host file system.\nSupply -e USERMAPPING=DISABLE while starting docker container to disable user mapping to host system.\nUnlike user mapped, data mounts above, note change in command format when you disable user mapping, i.e., supply bash command in quoutes without prefix -c\n docker run -e USERMAPPING=DISABLE -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/glasscore:/mnt/glasscore -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/scratch:/mnt/scratch -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk2/glassdata:/mnt/glassdata glasstools/keystone \u0026quot;id -a \u0026amp;\u0026amp; ls -alh /mnt/\u0026quot;   Note that docker container running as a glassuser has not valid permission to access mounted host volumes.  User and Group ID mapping: DISABLE ## INFO ## Running as a non-root glassuser with limited read-write privileges to host file system Visit http://docker.glass-consortium.org for more on how to use this docker image uid=2119518(glassuser) gid=712119(glass) groups=712119(glass),50(staff) total 8.0K drwxr-xr-x 5 root root 4.0K Oct 2 09:52 . drwxr-xr-x 21 root root 4.0K Oct 7 06:15 .. drwxr-x--- 4 12345 56565 4.0K Oct 2 10:41 glasscore drwxr-x--- 4 12345 56565 4.0K Oct 2 10:41 glassdata drwxr-x--- 4 12345 56565 4.0K Oct 2 10:41 scratch  end\n"
},
{
	"uri": "/setup/diskmounts/",
	"title": "Setup disk mounts",
	"tags": [],
	"description": "",
	"content": "  Prepare disk mounts on the host system for use with docker containers\n\nWith data mounts and host user:group mapping Singularity based image does not require user:group mapping but do require binding of disk mounts in same order as with docker based workflows.\n Tree view of GLASS mounts On host system, create a base directory named, glass_mounts with following subdirectories. GLASS workflows rely on strict hierarchy of directories within glass_mounts.\nglass_mounts # base directory on host system under all disk mounts are present ├── disk1 # disk for workflows scripts, custom startup for users and run logs │ ├── glasscore # space for workflows, user startup and apps configuration │ │ ├── configs │ │ │ ├── bin # put executables here to be sourced from container ENV │ │ │ ├── extapps # put jar files or compiled apps here │ │ │ │ └── Rpkgs # put additional compiled R packages (v3.4.2) here │ │ │ └── profile.d # user bash startup config ending with .sh extension │ │ └── workflows # read-only mount to keep git versioned GLASS workflows │ └── scratch │ ├── logs # logs while starting workflows are stored here │ └── refdata # all of referenced data from FTP portal │ └── bundle # GATK bundle from FTP portal goes here └── disk2 # disk for protected data └── glassdata # space for both input and output files ├── final_bams # final level 1 bam files or input for downstream ├── flowr # core directory where workflows will save data ├── inputs # space to keep input fastq or legacy bam files │ ├── bams # keep legacy bam files and mapping table per sample here │ │ └── sampleX │ └── fqs # keep legacy fastq files and mapping table per sample here │ └── sampleX └── tmp # space for saving tmp files when workflows are running  Rationale for host user mapping:  By default, docker container will always run as a non-root glassuser. When you enable host user mapping (recommended), docker container will create on-the-fly new user without any root privilege and map its UID and GID to that of current user running docker run or as defined via -e HOSTUSER= argument. With valid user mapping to a non-root, regular user on the host system, docker container will be able to read-write files only at mounted host data volumes under disk1/glasscore, disk1/scratch and disk2/glassdata. This is true as long as host user has permissions to write and recurse in directories at these locations. Such host user mapping restricts privilege escalation while running docker container which can otherwise adversely impact host file system. Read more at https://docs.docker.com/engine/security/security/ and https://security.stackexchange.com/a/153016  How to bind mounts # on host system, export variable where diskmounts are present, typically under /mnt export GLASSMOUNTS=\u0026quot;/mnt/glass_mounts\u0026quot;  Docker  Replace mygroupname and 00000 with relevant group name and ID, respectively.  docker run -e HOSTUSER=$USER -e HOSTGROUP=mygroupname \\ -e HOSTUSERID=$UID -e HOSTGROUPID=00000 \\ -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/glasscore:/mnt/glasscore \\ -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/scratch:/mnt/scratch \\ -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk2/glassdata:/mnt/glassdata \\ glasstools/keystone:latest goglass -m dna -t align -i fqs -s sample_barcode -f sample_mapping_table.tsv -d WES -n GO  Singularity singularity run --app goglass \\ -B \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/glasscore:/mnt/glasscore \\ -B \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/scratch:/mnt/scratch \\ -B \u0026quot;${GLASSMOUNTS}\u0026quot;/disk2/glassdata:/mnt/glassdata \\ glasstools_beta.simg -m dna -t align -i fqs -s sample_barcode -f sample_mapping_table.tsv -d WES -n GO  We are working on goglass wrapper for sharing with the entire group. Until then, please contact Roel, Samir or Hoon to get started on workflows.\n  This will source commands or workflow from disk1/glasscore/Workflows/goglass script with following instructions:  -m or mode: DNA (Others: RNA) -t or type: align (Others: mutect, mutect2, varscan2 for DNA; align, star, prada for RNA) -i or input: fqs for paired-end fastaq (Others: paired-end legacy bam files or level 1 aligned bam files from GLASS workflows for variant calling or RNAseq analyses) -s or unique sample barcode, preferably containing immutable uuid -f or mapping table: required for DNA alignments to get details on read groups for multi-lane sequenced samples -d or data type: WGS or WES for alignments -n or run type: DRY (test run) or GO (actual run) "
},
{
	"uri": "/howto/workflows/",
	"title": "Workflows",
	"tags": [],
	"description": "",
	"content": "\n Whole genome and exome alignments Variant callig RNAseq analyses "
},
{
	"uri": "/howto/workflows/dna_alignment/",
	"title": "DNA Alignment",
	"tags": [],
	"description": "",
	"content": " Allows whole genome and exome alignment from fastq or legacy bam files.\n \nHow-to run docker based pipeline Helper script: disk1/glasscore/configs/bin/glass_fastq_align\nOrganize fastq or bam files and matching mapping_table.tsv file, e.g., for sampleX, create folder named sampleX under /mnt/disk2/glassdata/inputs/fqs/ and then place sampleX_mapping_table.tsv file at /mnt/disk2/glassdata/inputs/fqs/sampleX/sampleX_mapping_table.tsv\nFilename of fastq files and not the full path should be written in the mapping table. Check out example mapping table at https://gist.github.com/sbamin/d86c9cd0b522a205fd128d266910a7cf\nglass_fastq_align --help has following arguments to run alignment workflow. As long as data organization is preserved, only unique sample_barcode argument, -s is mandatory to run this workflow.\nUsage: glass_fastq_align -s \u0026lt;UNIQUE SAMPLE NAME\u0026gt; -a \u0026lt;FILENAME OF FASTQ MAPPING TABLE\u0026gt; -m \u0026lt;RUN MODE (WGS|WES; default: WGS)\u0026gt; -t \u0026lt;RUN TYPE (DRY|GO; default: DRY)\u0026gt; -d1 \u0026lt;PATH TO DISK1 (default:/mnt/disk1)\u0026gt; -d1 \u0026lt;PATH TO DISK2 (default:/mnt/disk2)\u0026gt; | tee -a ~/glass_run.log -h display this help and exit -s unique sample_barcode (Required: This will be used to annotate bam headers and name output files) -a filename (and not full path) of fastq mapping table. Place this file under /mnt/disk2/glassdata/inputs/fqs/sample_barcode/ path default is \u0026lt;sample_barcode\u0026gt;_mapping_table.tsv -m run mode: WGS or WES (default: WGS; select WES if input fastqs are from whole exome or other target capture based assay) -t run type: DRY or GO (default: DRY; GO will execute actual pipeline on a compute node) -r path to reference data disk1 base (default: /mnt/disk1) -e path to storage data disk2 base (default: /mnt/disk2) Read http://docker.glass-consortium.org on setting up disk mounts by downloading pre-built reference datasets.  To run workflow: Assuming disk1 and disk2 are mounted at /mnt/, run typical dry run for WGS derived fastq for sample X using:\nglass_fastq_align -s sampleX_barcode -a sampleX_mapping_table.tsv | tee -a ~/glass_run.log  To switch to whole exome derived fastq files, do:\nglass_fastq_align -s sampleX_barcode -a sampleX_mapping_table.tsv -m WES | tee -a ~/glass_run.log  To switch from dry run to an actual run on a compute node, add -t GO argument, e.g.,:\nglass_fastq_align -s sampleX_barcode -a sampleX_mapping_table.tsv -m WES -t GO | tee -a ~/glass_run.log  PS: In all cases, raw fastq files and related mapping file must be under /mnt/disk2/glassdata/inputs/fqs/\u0026lt;sample_barcode\u0026gt;/ directory\n"
},
{
	"uri": "/howto/tidydata/",
	"title": "TidyData",
	"tags": [],
	"description": "",
	"content": " Backup level 1 realigned bam files Backup level 2 or 3 output files for downstream analyses  \nDocumentation is work in progress\n"
},
{
	"uri": "/howto/workflows/variant_calling/",
	"title": "Variant Caller",
	"tags": [],
	"description": "",
	"content": " Allows variant calling using\u0026hellip;\n  MuTect v1 MuTect v2 1 VarScan2 1  \nSetup  Download and extract GLASS tools tarball and docker image on a docker on a compatible compute node with at least 200 GB disk space, 64GB RAM and 24 VCPUs\n Setup docker image and disk mounts\n  To-do on client side\n Keep tumor and normal bam files under /path_to_disk2/glassdata/inputs/final_bams/ directory If you have used GLASS alignment workflow to generate bam files, those will already be in /path_to_disk2/glassdata/inputs/final_bams/  Dry Run  Helper script: disk1/glasscore/configs/bin/glass_variant_caller which has similar argument structure as for DNA alignment workflow with following new or updated arguments:\n -a: filename and not full path of reference bam file -b: filename and not full path of tumor bam file -m: Run mode can be either MUTECTV1, VARSCAN2 or MUTECTV2\n   # cd to code repository cd /path_to_disk1/glasscore/configs/bin/ ./glass_variant_caller -m \u0026lt;run mode or variant_caller_type\u0026gt; -a sampleX_nr.bam -b sampleX_tm.bam -s varcalls_caller_sampleX -t DRY | tee -a run.log  Actual Run:  change -t DRY to -t GO\n  Provides snvs, indels and germline calls [return]  "
},
{
	"uri": "/howto/workflows/rnaseq/",
	"title": "RNAseq Analyses",
	"tags": [],
	"description": "",
	"content": " Allows processing of RNAseq data using\u0026hellip;\n  STAR-htseq PRADA  \nSetup  Download and extract GLASS tools tarball and docker image on a docker on a compatible compute node with at least 200 GB disk space, 64GB RAM and 24 VCPUs\n Setup docker image and disk mounts\n  To-do on client side\n Organize sample wise RNAseq fastq files under /mnt/disk2/glassdata/inputs/fqs/sampleX/  Dry Run  Helper script: disk1/glasscore/configs/bin/glass_rnaseq which has similar argument structure as for DNA alignment workflow with following new or updated arguments:\n -a: filename(s) and not full path of read 1 of sample fastq file -b: filename(s) and not full path of read 2 of sample fastq file -m: Run mode can be either STAR or PRADA\n   # cd to code repository cd /path_to_disk1/glasscore/configs/bin/ ## Run STAR-htseq workflow ./glass_rnaseq -m STAR -a sampleX_read1.fq -b sampleX_read2.fq -s rnaseq_star_sampleX -t DRY | tee -a run.log ## Run PRADA workflow ./glass_rnaseq -m PRADA -a sampleX_read1.fq -b sampleX_read2.fq -s rnaseq_star_sampleX -t DRY | tee -a run.log  Actual Run:  change -t DRY to -t GO\n"
},
{
	"uri": "/howto/",
	"title": " How To",
	"tags": [],
	"description": "",
	"content": "  Workflows  \n DNA Alignment   Allows whole genome and exome alignment from fastq or legacy bam files.\n \n Variant Caller   Allows variant calling using\u0026hellip;\n  MuTect v1 MuTect v2 1 VarScan2 1  \n RNAseq Analyses   Allows processing of RNAseq data using\u0026hellip;\n  STAR-htseq PRADA  \n TidyData   Backup level 1 realigned bam files Backup level 2 or 3 output files for downstream analyses  \n  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "data infrastructure committee",
	"content": " Data Infrastructure and Processing Committee of GLASS consortium maintains standardized data processing and sharing. For more details, view our  preprint\n Chair Roel Verhaak, Jackson Laboratory for Genomic Medicine, Farmington, CT, USA\n   \nMembers  Rameen Beroukhim, Dana-Farber Cancer Institute, Boston, MA Christoph Bock, Center for Molecular Medicine, Vienna, Austria Joe Costello, UCSF, San Francisco, CA, USA Pim French, Erasmus University Medical Center, Rotterdam, the Netherlands Antonio Iavarone, Columbia University Medical Center, New York, NY, USA In-Hee Lee, Samsung Medical Center, Seoul, South Korea Hoon Kim, Jackson Laboratory for Genomic Medicine, Farmington, CT, USA Samir Amin, Jackson Laboratory for Genomic Medicine, Farmington, CT, USA Bernard Radlwimmer, German Cancer Research Center (DKFZ),Heidelberg, Germany Houtan Noushmehr, Henry Ford Health System, Detroit, MI, USA Lucy Stead, Leeds University, Leeds, UK  Workflow Development \u0026amp; Maintenance  Samir Amin       Hoon Kim      flowR workflow engine  Sahil Seth        IT Infrastructure at JAX-GM  Eduardo Zaborowski   Shane Sanders   David McKenzie    Static builds, CI, Versioning  Dev code and CI at Gitlab, contact Roel and Samir for access Production code at Github Docker image at docker://glasstools Singularity image at shub://glass-consortium/glasstools  Suggestions  Ming Tang     Floris Barthel   Kevin C. Johnson    "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/_header/",
	"title": "header",
	"tags": [],
	"description": "sidebar header",
	"content": " docker.glass-consortium.org\n"
}]