[
{
	"uri": "/",
	"title": "HOME",
	"tags": [],
	"description": "GLASS Workflows",
	"content": " Glioma Longitudinal AnalySiS Consortium This website hosts how-to manuals for running various analysis pipelines for the GLASS consortium.\nPreprint    Set Up  \n Setup keystone image  \n Setup disk mounts  \n How To  \n Workflows  \n DNA Alignment   Allows whole genome and exome alignment from fastq or legacy bam files.\n \n Variant Caller  \n RNAseq Analyses  \n TidyData  \n "
},
{
	"uri": "/setup/",
	"title": " Set Up",
	"tags": [],
	"description": "",
	"content": "  Setup keystone image  \n Setup disk mounts    Prepare disk mounts on the host system for use with docker containers\n\n  "
},
{
	"uri": "/setup/docker/",
	"title": "Setup keystone image",
	"tags": [],
	"description": "",
	"content": "  Download and setup docker image: glasstools/keystone\n\nDocker image: docker pull glasstools/keystone # OR docker pull glasstools/keystone:1.2.2    https://hub.docker.com/r/glasstools/keystone\nTest run With data mounts and host user:group mapping export GLASSMOUNTS=\u0026quot;/fastscratch/foo/dockvol/glass_tools/glass_mounts\u0026quot; docker run -e HOSTUSER=$USER -e HOSTGROUP=verhaak-lab -e HOSTUSERID=$UID -e HOSTGROUPID=56565 -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/glasscore:/mnt/glasscore -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/scratch:/mnt/scratch -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk2/glassdata:/mnt/glassdata glasstools/keystone   This will source commands or workflow from disk1/glasscore/Workflows/startup script  Run specific tools  To run specific command (user id mapped to host user), use \u0026quot;-c bash command\u0026quot; format immediately after docker run ... glasstools/keystone.\n export GLASSMOUNTS=\u0026quot;/fastscratch/foo/dockvol/glass_tools/glass_mounts\u0026quot; docker run -e HOSTUSER=$USER -e HOSTGROUP=verhaak-lab -e HOSTUSERID=$UID -e HOSTGROUPID=56565 -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/glasscore:/mnt/glasscore -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/scratch:/mnt/scratch -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk2/glassdata:/mnt/glassdata glasstools/keystone \u0026quot;-c samtools\u0026quot; ## view data mounts docker run -e HOSTUSER=$USER -e HOSTGROUP=verhaak-lab -e HOSTUSERID=$UID -e HOSTGROUPID=56565 -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/glasscore:/mnt/glasscore -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/scratch:/mnt/scratch -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk2/glassdata:/mnt/glassdata glasstools/keystone \u0026quot;-c ls -alh /mnt/\u0026quot;  Without data mounts docker run glasstools/keystone   keystone image is configured to be run with structured data mounts as shown under glass_mounts directory. Barebone docker run glasstools/keystone will quit immediately with partial message like following:\nUser and Group ID mapping: ENABLE Running userid_mapping.sh script\n disable usermapping  PS: Without host user:group mapping, docker container will run under default glassuser which has limited read:write permissions to host file system.\nSupply -e USERMAPPING=DISABLE while starting docker container to disable user mapping to host system.\nUnlike user mapped, data mounts above, note change in command format when you disable user mapping, i.e., supply bash command in quoutes without prefix -c\n docker run -e USERMAPPING=DISABLE -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/glasscore:/mnt/glasscore -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/scratch:/mnt/scratch -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk2/glassdata:/mnt/glassdata glasstools/keystone \u0026quot;id -a \u0026amp;\u0026amp; ls -alh /mnt/\u0026quot;   Note that docker container running as a glassuser has not valid permission to access mounted host volumes.  User and Group ID mapping: DISABLE ## INFO ## Running as a non-root glassuser with limited read-write privileges to host file system Visit http://docker.glass-consortium.org for more on how to use this docker image uid=2119518(glassuser) gid=712119(glass) groups=712119(glass),50(staff) total 8.0K drwxr-xr-x 5 root root 4.0K Oct 2 09:52 . drwxr-xr-x 21 root root 4.0K Oct 7 06:15 .. drwxr-x--- 4 12345 56565 4.0K Oct 2 10:41 glasscore drwxr-x--- 4 12345 56565 4.0K Oct 2 10:41 glassdata drwxr-x--- 4 12345 56565 4.0K Oct 2 10:41 scratch  end\n"
},
{
	"uri": "/setup/diskmounts/",
	"title": "Setup disk mounts",
	"tags": [],
	"description": "",
	"content": "  Prepare disk mounts on the host system for use with docker containers\n\nWith data mounts and host user:group mapping Rationale for host user mapping:  By default, docker container will always run as a non-root glassuser. When you enable host user mapping (recommended), docker container will create on-the-fly new user without any root privilege and map its UID and GID to that of current user running docker run or as defined via -e HOSTUSER= argument. With valid user mapping to a non-root, regular user on the host system, docker container will be able to read-write files only at mounted host data volumes under disk1/glasscore, disk1/scratch and disk2/glassdata. This is true as long as host user has permissions to write and recurse in directories at these locations. Such host user mapping restricts privilege escalation while running docker container which can otherwise adversely impact host file system. Read more at https://docs.docker.com/engine/security/security/ and https://security.stackexchange.com/a/153016  export GLASSMOUNTS=\u0026quot;/fastscratch/foo/dockvol/glass_tools/glass_mounts\u0026quot; docker run -e HOSTUSER=$USER -e HOSTGROUP=verhaak-lab -e HOSTUSERID=$UID -e HOSTGROUPID=56565 -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/glasscore:/mnt/glasscore -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk1/scratch:/mnt/scratch -v \u0026quot;${GLASSMOUNTS}\u0026quot;/disk2/glassdata:/mnt/glassdata glasstools/keystone   This will source commands or workflow from disk1/glasscore/Workflows/startup script "
},
{
	"uri": "/howto/workflows/",
	"title": "Workflows",
	"tags": [],
	"description": "",
	"content": "\n Whole genome and exome alignments Variant callig RNAseq analyses "
},
{
	"uri": "/howto/workflows/dna_alignment/",
	"title": "DNA Alignment",
	"tags": [],
	"description": "",
	"content": " Allows whole genome and exome alignment from fastq or legacy bam files.\n \nHow-to run docker based pipeline Helper script: disk1/glasscore/configs/bin/glass_fastq_align\nOrganize fastq or bam files and matching mapping_table.tsv file, e.g., for sampleX, create folder named sampleX under /mnt/disk2/glassdata/inputs/fqs/ and then place sampleX_mapping_table.tsv file at /mnt/disk2/glassdata/inputs/fqs/sampleX/sampleX_mapping_table.tsv\nFilename of fastq files and not the full path should be written in the mapping table. Check out example mapping table at https://gist.github.com/sbamin/d86c9cd0b522a205fd128d266910a7cf\nglass_fastq_align --help has following arguments to run alignment workflow. As long as data organization is preserved, only unique sample_barcode argument, -s is mandatory to run this workflow.\nUsage: ${0##*/} -s \u0026lt;UNIQUE SAMPLE NAME\u0026gt; -a \u0026lt;FILENAME OF FASTQ MAPPING TABLE\u0026gt; -m \u0026lt;RUN MODE (WGS|WES; default: WGS)\u0026gt; -t \u0026lt;RUN TYPE (DRY|GO; default: DRY)\u0026gt; -d1 \u0026lt;PATH TO DISK1 (default:/mnt/disk1)\u0026gt; -d1 \u0026lt;PATH TO DISK2 (default:/mnt/disk2)\u0026gt; | tee -a ~/glass_run.log -h display this help and exit -s unique sample_barcode (Required: This will be used to annotate bam headers and name output files) -a filename (and not full path) of fastq mapping table. Place this file under /mnt/disk2/glassdata/inputs/fqs/sample_barcode/ path default is \u0026lt;sample_barcode\u0026gt;_mapping_table.tsv -m run mode: WGS or WES (default: WGS; select WES if input fastqs are from whole exome or other target capture based assay) -t run type: DRY or GO (default: DRY; GO will execute actual pipeline on a compute node) -r path to reference data disk1 base (default: /mnt/disk1) -e path to storage data disk2 base (default: /mnt/disk2) Read http://docker.glass-consortium.org on setting up disk mounts by downloading pre-built reference datasets.  To run workflow: Assuming disk1 and disk2 are mounted at /mnt/, run typical dry run for WGS derived fastq for sample X using:\n${0##*/} -s sampleX_barcode -a sampleX_mapping_table.tsv | tee -a ~/glass_run.log  To switch to whole exome derived fastq files, do:\n${0##*/} -s sampleX_barcode -a sampleX_mapping_table.tsv -m WES | tee -a ~/glass_run.log  To switch from dry run to an actual run on a compute node, add -t GO argument, e.g.,:\n${0##*/} -s sampleX_barcode -a sampleX_mapping_table.tsv -m WES -t GO | tee -a ~/glass_run.log  PS: In all cases, raw fastq files and related mapping file must be under /mnt/disk2/glassdata/inputs/fqs/\u0026lt;sample_barcode\u0026gt;/ directory\n"
},
{
	"uri": "/howto/tidydata/",
	"title": "TidyData",
	"tags": [],
	"description": "",
	"content": " Backup level 1 realigned bam files Backup level 2 or 3 output files for downstream analyses  \nDocumentation is work in progress\n"
},
{
	"uri": "/howto/workflows/variant_calling/",
	"title": "Variant Caller",
	"tags": [],
	"description": "",
	"content": " Allows variant calling using\u0026hellip;\n  MuTect v1 MuTect v2 1 VarScan2 1  \nDocumentation is work in progress\n Variant Calling Pipeline - GLASS http://docker.glass-consortium.org or https://github.com/glass-consortium git branch: ultraseq\nv 1.0-b2 | 23-Aug-2016\nHow-to run on Nautilus HPC Input: bam files cd ~/pipelines/docker_mutect/flowr flowr run x=flowr_ultraseq mytm_bampath=\u0026quot;/scratch/sample_tm.bam\u0026quot; mynr_bampath=\u0026quot;/scratch/sample_nr.bam\u0026quot; sample_name=\u0026quot;sample_tm_nr\u0026quot; execute=TRUE |\u0026amp; tee -a ~/logs/glass_tools/nautilus_run_bam.log  Input: paired end fastq files  IMPORTANT:\n  Only paired end fastq and one each for tumor and normal sample is supported at present. mytm_fq_prefix and mynr_fq_prefix take path prefix until 1.fq and 2.fq for each of tumor and normal bam files, e.g., For mytm_fq_prefix, specify path to paired end fastq as /scratch/TCGA-06-0125-02A-11D-2280-08.1.end where it expects paired end fastq files:  TCGA-06-0125-02A-11D-2280-08.1.end1.fq TCGA-06-0125-02A-11D-2280-08.1.end2.fq  paired end fastq files must end with 1.fq and 2.fq sample_name is important as all output files will carry this name. Ideally, it should incorporate unique id from tumor followed by normal fastq file name.  cd ~/pipelines/docker_mutect/flowr flowr run x=flowr_ultraseq_fq mytm_fq_prefix=\u0026quot;/scratch/TCGA-06-0125-02A-11D-2280-08.1.end\u0026quot; mynr_fq_prefix=\u0026quot;/scratch/TCGA-06-0125-10A-01D-1490-08.6.end\u0026quot; sample_name=\u0026quot;TCGA-06-0125-02Avs10A\u0026quot; execute=TRUE |\u0026amp; tee -a ~/logs/glass_tools/nautilus_run_fqs.log  How-to run docker based pipeline Download and extract GLASS tools tarball and docker image on a docker (v1.10.3 or above) compatible compute node with at least 200 GB disk space, 64GB RAM and 24 VCPUs\nSetup docker image for GLASS tools Supplied docker image: glass_tools_1.0-b2.tar (approx. 5.1 GB) with md5sum of 98ab29f97c110c61715cc6709fc00c79\ndocker load -i glass_tools_1.0-b2.tar docker inspect sbamin/glass_tools:1.0-b2   Image ID: \u0026ldquo;Image\u0026rdquo;:\nsha256:63a3d71e619129ba40ca5719daa5625f665967b837422f7b5a6e29dc28293aeb\n Setup GLASS base directory  GLASS base directory, glassdir will be used as the top-level directory to process raw data using GLASS pipeline and store processed data You can save it at /home/mdauser/glassdir but can be moved elsewhere where you have sufficient disk capacity  Base directory is organized into several subdirectories which should not be modified else docker wrapper script, goglass.sh (below) may show an error   Base directory structure Supplied with GLASS tools tarball - git versioned code for running variant calling pipeline under dockscratch/docker_mutect. It should always point to ultraseq git branch when you execute git status command - If you have received tarball/zip archive of docker_mutect code, it is not a git repository and you already have ultraseq branch - Scripts inside dockscratch/docker_mutect/runner/ requires executable flag (rwx or r-x) - Use supplied GATK bundle at /dockscratch/bundle/ for GATK preprocessing and running MuTect - flowr runs to process and store variant calls will be under dockscratch/flowr/\u0026lt;sample_specific_directory_with_timestamp\u0026gt;/ - log files will be under dockscratch/logs/\nTo-do on client side - Keep tumor and normal bam files under dockscratch/tmp/ directory - Please download academic, non-profit license versions of GATK 3.5 and MuTect 1.1.4 and 1.1.7 and keep extracted jar files exactly as follows:\n``` /dockopt/gatk/GenomeAnalysisTK.jar /dockopt/mutect/muTect-1.1.4.jar /dockopt/mutect/mutect-1.1.7.jar ```  Dry Run: # cd to code repository cd /scratch/rverhaak/glassdir/dockscratch/docker_mutect ./goglass.sh -h ./goglass.sh -p /scratch/rverhaak/glassdir -t sample_tm.bam -n sample_nr.bam -s test_glass_tools -r DRY | tee -a /scratch/rverhaak/glassdir/dockscratch/logs/test_glass_tools.log  Real Run:  change -r DRY to -r GO\n ## remove dry run docker container docker rm test_glass_tools # cd to code repository cd /home/mdauser/docktest/dockscratch/docker_mutect ./goglass.sh -h ./goglass.sh -p /scratch/rverhaak/glassdir -t sample_tm.bam -n sample_nr.bam -s test_glass_tools -r GO | tee -a /scratch/rverhaak/glassdir/dockscratch/logs/test_glass_tools.log  Interactive run You can test docker image by running it interactively as follows:\ndocker run -it --name glass_tools_interactive -v /scratch/rverhaak/glassdir/dockscratch:/scratch -v /scratch/rverhaak/glassdir/dockscratch/docker_mutect:/scratch/docker_mutect:ro -v /scratch/rverhaak/glassdir/dockscratch/bundle:/scratch/bundle -v /scratch/rverhaak/glassdir/dockopt/gatk:/opt/gatk -v /scratch/rverhaak/glassdir/dockopt/mutect:/opt/mutect sbamin/glass_tools:1.0-b2 /bin/bash  PS: You will be running docker container as a root user and can exit to return to your host terminal prompt. To restart interactive mode, do following:\ndocker start glass_tools_interactive docker exec -it glass_tools_interactive /bin/bash   Provides snvs, indels and germline calls [return]  "
},
{
	"uri": "/howto/workflows/rnaseq/",
	"title": "RNAseq Analyses",
	"tags": [],
	"description": "",
	"content": " Allows processing of RNAseq data using\u0026hellip;\n  STAR-htseq workflow PRADA  \nDocumentation is work in progress\n"
},
{
	"uri": "/howto/",
	"title": " How To",
	"tags": [],
	"description": "",
	"content": "Documentation is work in progress\n   Workflows  \n DNA Alignment   Allows whole genome and exome alignment from fastq or legacy bam files.\n \n Variant Caller  \n RNAseq Analyses  \n TidyData   Backup level 1 realigned bam files Backup level 2 or 3 output files for downstream analyses  \n  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "data infrastructure committee",
	"content": " Data Infrastructure and Processing Committee of GLASS consortium maintains standardized data processing and sharing. For more details, view our  preprint\n Chair Roel Verhaak, Jackson Laboratory for Genomic Medicine, Farmington, CT, USA\n   \nMembers  Rameen Beroukhim, Dana-Farber Cancer Institute, Boston, MA Christoph Bock, Center for Molecular Medicine, Vienna, Austria Joe Costello, UCSF, San Francisco, CA, USA Pim French, Erasmus University Medical Center, Rotterdam, the Netherlands Antonio Iavarone, Columbia University Medical Center, New York, NY, USA In-Hee Lee, Samsung Medical Center, Seoul, South Korea Hoon Kim, Jackson Laboratory for Genomic Medicine, Farmington, CT, USA Samir Amin, Jackson Laboratory for Genomic Medicine, Farmington, CT, USA Bernard Radlwimmer, German Cancer Research Center (DKFZ),Heidelberg, Germany Houtan Noushmehr, Henry Ford Health System, Detroit, MI, USA Lucy Stead, Leeds University, Leeds, UK  Workflow Development \u0026amp; Maintenance  Samir Amin       Hoon Kim      flowR workflow engine  Sahil Seth        IT Infrastructure  Suggestions Ming Tang    \n Floris Barthel  \n  "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/_header/",
	"title": "header",
	"tags": [],
	"description": "sidebar header",
	"content": " Created by potrace 1.11, written by Peter Selinger 2001-2013    docker.glass-consortium.org\n"
}]